package main

import (
	"fmt"
	"net"
	"strconv"
	"sync"
)

func main() {
	host := "scanme.nmap.org"
	ports := []int{22, 80, 443, 8080} // Ports to scan

	var wg sync.WaitGroup        // WaitGroup is used to wait for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. Then each of the goroutines runs and calls Done when finished. At the same time, Wait can be used to block until all goroutines have finished.
	for _, port := range ports { // Range iterates over elements in a variety of data structures. It returns one (index, value) pair for each iteration. The first value returned is the index, and the second is a copy of the element at that index. If the collection is a map, the index returned is the next map key, as defined by the map iteration order. If the collection is a string, the index is the byte offset of the rune and the second value is a rune. If the collection has no defined iteration order, the index values are not specified and are implementation dependent. If the collection is nil or empty, the range expression does not iterate and the loop body is not executed.
		wg.Add(1)           // Add adds delta, which may be negative, to the WaitGroup counter. If the counter becomes zero, all goroutines blocked on Wait are released. If the counter goes negative, Add panics.
		go func(port int) { // Go routines are lightweight threads managed by the Go runtime. They are created using the go keyword. The go keyword is followed by a function call. The function is executed in a separate goroutine. The main function is also executed in a goroutine.
			defer wg.Done()                            // Done decrements the WaitGroup counter by one.
			address := host + ":" + strconv.Itoa(port) // Itoa is equivalent to FormatInt(int64(i), 10). It returns the string representation of i in base 10.
			conn, err := net.Dial("tcp", address)
			if err != nil {
				fmt.Printf("Port %d is closed\n", port)
				return
			}
			conn.Close()
			fmt.Printf("Port %d is open\n", port)
		}(port)
	}
	wg.Wait()
}
